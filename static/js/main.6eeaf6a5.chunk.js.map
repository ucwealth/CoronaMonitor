{"version":3,"sources":["components/header.js","components/footer.js","components/main.js","components/form.js","components/affectedCountries.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","Footer","role","aria-label","Main","style","textAlign","Row","Col","xs","TotalConfirmed","TotalRecovered","TotalDeaths","SearchForm","Form","onSubmit","fetchCountryData","FormGroup","Label","for","Input","type","name","placeholder","value","inputValue","onChange","handleInputChange","Button","handleRankSelect","AffectedCountries","freeCountry","freeCountries","filter","freeCon","Country","rankSelect","Table","striped","map","eachCountry","index","key","App","state","undefined","allAffectedCountries","rankValue","fetchCovidData","api","fetch","then","response","json","e","preventDefault","country","target","elements","data","countryInput","Countries","console","log","setState","sort","a","b","this","affectedCountries","eachCon","push","Global","catch","err","filteredCountries","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6eeaf6a5.chunk.js","sourcesContent":["import '../App.css';\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container\n} from 'reactstrap';\n\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"dark\" dark expand=\"md\">\n      <Container>\n        <NavbarBrand href=\"#\">CV Monitor</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          \n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"#\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"#About\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"#Contact\">Contact</NavLink>\n            </NavItem>\n          </Nav>\n          \n        </Collapse>\n        </Container>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Container } from \"reactstrap\";\n\nfunction Footer() {\n  return (\n    <div className=\"centerDiv\">\n      <footer className=\"footer\">\n        <Container>\n          <p className=\"text-muted\">\n            &copy;2020 | Made With\n            <span role=\"img\" aria-label=\"red-heart\">\n              ❤️\n            </span>\n            By Uchechukwu Okeke\n          </p>\n        </Container>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Row, Col, Container } from \"reactstrap\";\n\nfunction Main(props) {\n  return (\n    <div className=\"main\">\n      <Container>\n        <h2 style={{ textAlign: \"center\" }}>Global CoronaVirus Statistics</h2>\n        <br />\n        <Row>\n          <Col xs=\"4\">\n            <p>\n              Total Confirmed Cases: <strong>{props.TotalConfirmed}</strong>\n            </p>\n          </Col>\n\n          <Col xs=\"4\">\n            <p>\n              Total Recovered Cases: <strong>{props.TotalRecovered}</strong>{\" \"}\n            </p>\n          </Col>\n\n          <Col xs=\"4\">\n            <p>\n              Total Deaths:\n              <br />\n              <strong>{props.TotalDeaths}</strong>{\" \"}\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"../App.css\";\nimport {\n  Container,\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n} from \"reactstrap\";\n\nconst SearchForm = (props) => {\n  return (\n    <div className=\"centerDiv\">\n      <Container>\n        <Form onSubmit={props.fetchCountryData}>\n          <Row>\n            <Col xs=\"6\">\n              <FormGroup>\n                <Label for=\"country\">\n                  Do you want to search For a specific country?\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"country\"\n                  placeholder=\"Enter Country Name...\"\n                  value={props.inputValue}\n                  onChange={props.handleInputChange}\n                />\n                <Button color=\"success\" type=\"submit\">\n                  Search\n                </Button>\n              </FormGroup>\n            </Col>\n            <Col xs=\"6\">\n              <FormGroup>\n                <div className=\"centerDiv\">\n                  <label>Rank Countries In Order</label>\n                  <Input\n                    type=\"select\"\n                    name=\"rankValue\"\n                    onChange={props.handleRankSelect}\n                  >\n                    <option value=\"All\">Rank Countries</option>\n                    <option value=\"fromLowest\">From Lowest to Highest</option>\n                    <option value=\"fromHighest\">From Highest to Lowest</option>\n                  </Input>\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Container, Table, Row, Col } from \"reactstrap\";\n\nconst AffectedCountries = (props) => {\n  const freeCountry = props.freeCountries.filter(\n    (freeCon) => freeCon.Country === props.inputValue\n  );\n\n  if (!props.rankSelect) {\n    return (\n      <Col>\n        <Row>Table Loading...</Row>\n      </Col>\n    );\n  } else if (props.inputValue === freeCountry) {\n    return (\n      <div className=\"centerDiv\">\n        <p>Corona Free!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"centerDiv\">\n      <Container>\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Country</th>\n              <th>Total Confirmed</th>\n              <th>Total Recovered</th>\n              <th>Total Deaths</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.rankSelect.map((eachCountry, index) => {\n              return (\n                <tr key={index}>\n                  <td>{eachCountry.Country}</td>\n                  <td>{eachCountry.TotalConfirmed}</td>\n                  <td>{eachCountry.TotalRecovered}</td>\n                  <td>{eachCountry.TotalDeaths}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Container>\n    </div>\n  );\n};\n\nexport default AffectedCountries;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport Main from \"./components/main\";\nimport SearchForm from \"./components/form\";\nimport AffectedCountries from \"./components/affectedCountries\";\n\nclass App extends Component {\n  state = {\n    TotalConfirmed: undefined,\n    TotalDeaths: undefined,\n    TotalRecovered: undefined,\n    allAffectedCountries: [],\n    freeCountries: [],\n    inputValue: \"\",\n    rankValue: \"\",\n  };\n\n  fetchCovidData = () => {\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const api = `${proxy}https://api.covid19api.com/summary`;\n    return fetch(api).then((response) => {\n      return response.json();\n    });\n  };\n\n  fetchCountryData = (e) => {\n    e.preventDefault();\n    const country = e.target.elements.country.value;\n    if (country) {\n      this.fetchCovidData().then((data) => {\n        const countryInput = data.Countries.filter(\n          (eachCountry) => eachCountry.Country === country\n        );\n        console.log(countryInput);\n      });\n    } else {\n      console.log(\"Please Enter A Valid Country!\");\n    }\n  };\n\n  handleInputChange = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleRankSelect = (e) => {\n    this.setState({ rankValue: e.target.value });\n  };\n\n  rankSelect = (allAffectedCountries) => {\n    if (this.state.rankValue === \"fromLowest\") {\n      return [...allAffectedCountries].sort((a, b) => {\n        if (a.TotalConfirmed > b.TotalConfirmed) {\n          return 1;\n        } else if (a.TotalConfirmed < b.TotalConfirmed) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n    } else if (this.state.rankValue === \"fromHighest\") {\n      return [...allAffectedCountries].sort((a, b) => {\n        if (a.TotalConfirmed > b.TotalConfirmed) {\n          return -1;\n        } else if (a.TotalConfirmed < b.TotalConfirmed) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return allAffectedCountries;\n    }\n  };\n\n  componentDidMount() {\n    this.fetchCovidData()\n      .then((data) => {\n        //generate array of affected countries\n        const affectedCountries = [];\n        const freeCountries = [];\n        data.Countries.map((eachCon) => {\n          if (eachCon.TotalConfirmed < 1) {\n            freeCountries.push(eachCon);\n          } else {\n            affectedCountries.push(eachCon);\n          }\n          return affectedCountries;\n        });\n        // end of the generation\n\n        this.setState({\n          TotalConfirmed: data.Global.TotalConfirmed,\n          TotalDeaths: data.Global.TotalDeaths,\n          TotalRecovered: data.Global.TotalRecovered,\n          allAffectedCountries: affectedCountries,\n          freeCountries: freeCountries,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    const {\n      TotalConfirmed,\n      TotalDeaths,\n      TotalRecovered,\n      allAffectedCountries,\n      inputValue,\n      rankValue,\n      freeCountries,\n    } = this.state;\n\n    const filteredCountries = allAffectedCountries.filter((country) => {\n      return country.Country.toLowerCase().includes(inputValue.toLowerCase());\n    });\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main\n          TotalConfirmed={TotalConfirmed}\n          TotalDeaths={TotalDeaths}\n          TotalRecovered={TotalRecovered}\n        />\n        <br />\n        <SearchForm\n          fetchCountryData={this.fetchCountryData}\n          inputValue={inputValue}\n          handleInputChange={this.handleInputChange}\n          handleRankSelect={this.handleRankSelect}\n          rankValue={rankValue}\n        />\n        <br />\n        <AffectedCountries\n          inputValue={inputValue}\n          rankSelect={this.rankSelect(filteredCountries)}\n          freeCountries={freeCountries}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}